"""Tests for FlextLdifUtilities coverage gaps.

Copyright (c) 2025 FLEXT Team. All rights reserved.
SPDX-License-Identifier: MIT
"""

from __future__ import annotations

from flext_core import FlextUtilities

from flext_ldif.models import FlextLdifModels
from flext_ldif.utilities import FlextLdifUtilities


class TestFlextLdifUtilitiesCoverageGaps:
    """Test coverage gaps in FlextLdifUtilities."""

    def test_ldif_domain_processors_property(self) -> None:
        """Test core utilities property access."""
        utilities = FlextLdifUtilities()
        core_utilities = utilities.core
        assert core_utilities is not None
        assert isinstance(core_utilities, FlextUtilities)

    def test_get_default_instance_class_method(self) -> None:
        """Test utilities instance creation."""
        # Test creating utilities instance
        instance1 = FlextLdifUtilities()
        assert instance1 is not None
        assert isinstance(instance1, FlextLdifUtilities)

        # Test that we can create multiple instances
        instance2 = FlextLdifUtilities()
        assert isinstance(instance2, FlextLdifUtilities)
        # They should be different instances
        assert instance1 is not instance2

    def test_class_level_access(self) -> None:
        """Test class-level access to utilities."""
        # Test that class-level access works
        utilities = FlextLdifUtilities()
        assert utilities is not None

        # Test core utilities access
        core_utilities = utilities.core
        assert core_utilities is not None

        # Test utility info access
        info = utilities.get_utility_info()
        assert info is not None

    def test_find_entries_missing_required_attributes_empty_required(self) -> None:
        """Test validate_ldif_entry_completeness with empty required attributes."""
        utilities = FlextLdifUtilities()

        # Create a test entry
        entry = FlextLdifModels.Factory.create_entry(
            {
                "dn": "cn=test,dc=example,dc=com",
                "attributes": {"cn": ["test"], "objectClass": ["person"]},
            }
        )

        # Test entry completeness validation
        result = utilities.validate_ldif_entry_completeness(entry)
        assert result.is_success
        assert result.unwrap() is True

    def test_entry_to_dict_success(self) -> None:
        """Test entry_to_dict successful conversion."""
        utilities = FlextLdifUtilities()

        # Create a test entry
        entry = FlextLdifModels.Factory.create_entry(
            {
                "dn": "cn=test,dc=example,dc=com",
                "attributes": {"cn": ["test"], "objectClass": ["person"]},
            }
        )

        result = utilities.convert_entry_to_dict(entry)
        assert result.is_success
        data = result.unwrap()
        assert data["dn"] == "cn=test,dc=example,dc=com"
        assert "attributes" in data

    def test_attributes_to_ldif_format_empty_key_skip_empty(self) -> None:
        """Test attributes_to_ldif_format with empty key and skip_empty=True."""
        utilities = FlextLdifUtilities()
        converters = utilities.converters

        # Test with empty key and skip_empty=True (should continue)
        attributes = {"": "value", "cn": "test"}
        result = converters.attributes_to_ldif_format(attributes, skip_empty=True)
        assert result.is_success
        data = result.unwrap()
        assert "cn" in data
        assert "" not in data  # Empty key should be skipped

    def test_attributes_to_ldif_format_empty_key_no_skip_empty(self) -> None:
        """Test attributes_to_ldif_format with empty key and skip_empty=False."""
        utilities = FlextLdifUtilities()
        converters = utilities.converters

        # Test with empty key and skip_empty=False (should fail)
        attributes = {"": "value"}
        result = converters.attributes_to_ldif_format(attributes, skip_empty=False)
        assert result.is_failure
        assert "Empty attribute name found" in result.error

    def test_attributes_to_ldif_format_empty_string_value_skip_empty(self) -> None:
        """Test attributes_to_ldif_format with empty string value and skip_empty=True."""
        utilities = FlextLdifUtilities()
        converters = utilities.converters

        # Test with empty string value and skip_empty=True
        attributes = {"cn": "", "sn": "test"}
        result = converters.attributes_to_ldif_format(attributes, skip_empty=True)
        assert result.is_success
        data = result.unwrap()
        assert "cn" not in data  # Empty string should be skipped
        assert "sn" in data

    def test_attributes_to_ldif_format_empty_string_value_no_skip_empty(self) -> None:
        """Test attributes_to_ldif_format with empty string value and skip_empty=False."""
        utilities = FlextLdifUtilities()
        converters = utilities.converters

        # Test with empty string value and skip_empty=False
        attributes = {"cn": "", "sn": "test"}
        result = converters.attributes_to_ldif_format(attributes, skip_empty=False)
        assert result.is_success
        data = result.unwrap()
        assert "cn" in data  # Empty string should be included
        assert "sn" in data

    def test_attributes_to_ldif_format_normalize_names_false(self) -> None:
        """Test attributes_to_ldif_format with normalize_names=False."""
        utilities = FlextLdifUtilities()
        converters = utilities.converters

        # Test with normalize_names=False
        attributes = {"CN": "test", "sn": "test"}
        result = converters.attributes_to_ldif_format(attributes, normalize_names=False)
        assert result.is_success
        data = result.unwrap()
        assert "CN" in data  # Should preserve case
        assert "sn" in data

    def test_convert_entry_to_dict_with_none_values(self) -> None:
        """Test convert_entry_to_dict with entry containing None values in attributes."""
        # Create entry with various attribute values
        entry = FlextLdifModels.Entry.model_validate(
            {
                "dn": "cn=test,dc=example,dc=com",
                "attributes": {
                    "cn": ["test", "another"],
                    "sn": ["value"],
                    "objectClass": ["person"],
                },
            }
        )

        utilities = FlextLdifUtilities()
        result = utilities.convert_entry_to_dict(entry)
        assert result.is_success
        data = result.unwrap()
        assert "cn" in data["attributes"]
        assert len(data["attributes"]["cn"]) == 2
        assert "test" in data["attributes"]["cn"]
        assert "another" in data["attributes"]["cn"]

    def test_attributes_to_ldif_format_list_with_empty_strings_skip_empty(self) -> None:
        """Test convert_entry_to_dict with list containing empty strings."""
        utilities = FlextLdifUtilities()

        # Create a test entry with empty strings
        entry = FlextLdifModels.Factory.create_entry(
            {
                "dn": "cn=test,dc=example,dc=com",
                "attributes": {"cn": ["test", "", "another"], "sn": ["test"]},
            }
        )

        # Test convert_entry_to_dict
        result = utilities.convert_entry_to_dict(entry)
        assert result.is_success
        data = result.unwrap()
        assert "cn" in data
        assert len(data["cn"]) == 3  # All values including empty string
        assert "test" in data["cn"]
        assert "another" in data["cn"]

    def test_entry_to_dict_exception_handling(self) -> None:
        """Test entry_to_dict exception handling."""
        utilities = FlextLdifUtilities()

        # Create a mock entry that will cause an exception during attribute access
        class MockEntry:
            @property
            def dn(self) -> str:
                msg = "Simulated DN access error"
                raise ValueError(msg)

            @property
            def attributes(self) -> dict[str, list[str]]:
                return {}

        mock_entry = MockEntry()
        result = utilities.convert_entry_to_dict(mock_entry)
        assert result.is_failure
        assert "conversion failed" in result.error.lower()
