from collections.abc import Callable
from pathlib import Path

from flext_core import FlextConfig, FlextEntity, FlextEntityId, FlextResult, FlextValue
from flext_core.result import FlextResult as _FlextResultAlias

__all__ = [
    "FlextLdifAttributes",
    "FlextLdifConfig",
    "FlextLdifDistinguishedName",
    "FlextLdifEntry",
    "FlextLdifFactory",
]

type ValidatorFunc = Callable[[str], bool]

class FlextLdifDistinguishedName(FlextValue):
    value: str
    @classmethod
    def validate_dn(cls, v: str) -> str: ...
    def __eq__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def validate_business_rules(self) -> FlextResult[None]: ...
    def get_rdn(self) -> str: ...
    def get_parent_dn(self) -> FlextLdifDistinguishedName | None: ...
    def get_depth(self) -> int: ...
    def to_dn_dict(self) -> dict[str, object]: ...
    def is_child_of(self, parent_dn: FlextLdifDistinguishedName) -> bool: ...

class FlextLdifAttributes(FlextValue):
    attributes: dict[str, list[str]]
    @classmethod
    def normalize_dn_attributes(
        cls, v: dict[str, list[str]]
    ) -> dict[str, list[str]]: ...
    def validate_business_rules(self) -> FlextResult[None]: ...
    def validate_semantic_rules(self) -> FlextResult[None]: ...
    def get_values(self, name: str) -> list[str]: ...
    def has_attribute(self, name: str) -> bool: ...
    def get_object_classes(self) -> list[str]: ...
    def get_single_value(self, name: str) -> str | None: ...
    def add_value(self, name: str, value: str | None) -> FlextLdifAttributes: ...
    def is_empty(self) -> bool: ...
    def __hash__(self) -> int: ...
    def __eq__(self, other: object) -> bool: ...
    def get_total_values(self) -> int: ...
    def remove_value(self, name: str, value: str) -> FlextLdifAttributes: ...
    def to_dict(self) -> dict[str, object]: ...
    def get_attribute_names(self) -> list[str]: ...

class FlextLdifEntry(FlextEntity):
    id: FlextEntityId
    dn: FlextLdifDistinguishedName
    attributes: FlextLdifAttributes
    changetype: str | None
    def __hash__(self) -> int: ...
    def __eq__(self, other: object) -> bool: ...
    @classmethod
    def from_ldif_dict(
        cls, dn: str, attributes: dict[str, list[str]]
    ) -> FlextLdifEntry: ...
    @classmethod
    def model_validate(
        cls, obj: dict[str, object] | object, **_kwargs: object
    ) -> FlextLdifEntry: ...
    def validate_business_rules(self) -> FlextResult[None]: ...
    def validate_semantic_rules(self) -> FlextResult[None]: ...
    def has_object_class(self, object_class: str) -> bool: ...
    def get_object_classes(self) -> list[str]: ...
    def is_organizational_unit(self) -> bool: ...
    def is_group_of_names(self) -> bool: ...
    def get_attribute(self, name: str) -> list[str] | None: ...
    def get_attribute_values(self, name: str) -> list[str]: ...
    def get_single_attribute(self, name: str) -> str | None: ...
    def has_attribute(self, name: str) -> bool: ...
    def to_ldif(self) -> str: ...
    def set_attribute(self, name: str, values: list[str]) -> None: ...
    @classmethod
    def from_ldif_block(cls, block: str) -> FlextLdifEntry: ...
    def is_person_entry(self) -> bool: ...
    def is_group_entry(self) -> bool: ...
    def is_valid_entry(self) -> bool: ...
    def is_add_operation(self) -> bool: ...
    def is_modify_operation(self) -> bool: ...
    def is_delete_operation(self) -> bool: ...

class FlextLdifFactory:
    @staticmethod
    def create_dn(value: str) -> FlextResult[FlextLdifDistinguishedName]: ...
    @staticmethod
    def create_attributes(
        attributes: dict[str, list[str]],
    ) -> FlextResult[FlextLdifAttributes]: ...
    @staticmethod
    def create_entry(
        dn: str, attributes: dict[str, list[str]], changetype: str | None = None
    ) -> FlextResult[FlextLdifEntry]: ...

class FlextLdifConfig(FlextConfig):
    max_entries: int
    max_entry_size: int
    strict_validation: bool
    input_encoding: str
    output_encoding: str
    output_directory: Path
    create_output_dir: bool
    line_wrap_length: int
    sort_attributes: bool
    normalize_dn: bool
    allow_empty_attributes: bool
    def validate_business_rules(self) -> _FlextResultAlias[None]: ...
